#!/usr/bin/python3

import yaml, random, re, sys, textwrap

config : dict = {}

def loadConfigs():
    global configsfile
    with open(".circleci/configs.yml","rb") as f:
        configsfile = yaml.safe_load(f)

def chooseConfig():
    global config, defaults
    pick = configsfile['pick']
    configs = configsfile['configs']
    defaults = configsfile['defaults']
    configkeys = list(configs.keys())
    if pick == 'random':
        i = random.randrange(0, len(configkeys))
        configname = configkeys[i]
    else:
        configname = pick
    config = configs[configname]
    assert 'name' not in config
    print(f"Picking configuration {configname} for Circle CI")
    config['name'] = configname

def getKey(key: str) -> str:
    if key in config:
        return str(config[key])
    if key in defaults:
        code = defaults[key]
        code = textwrap.indent(code, '  ')
        code = f"def get_default_function():\n{code}\n"
        locals = config.copy()
        exec(code, config.copy(), locals)
        result = locals['get_default_function']()
        if result is None: sys.exit(f"Default key {key} returned no value")
        return str(result)
    sys.exit(f"Unknown substitution {key} in template. Configured keys: {config.keys()}. Default keys: {defaults.keys()}")

def makeConfig():
    with open(".circleci/template.yml","rt") as f:
        template = f.read()

    def repl(m) -> str:
        return getKey(m[1])

    result = re.sub(r"@{([a-zA-Z0-9_]+)}", repl, template)

    with open(".circleci/config.yml", "wt") as f:
        f.write("# Autogenerated from template.yml. Changes will be lost.\n\n")
        f.write(result)

loadConfigs()
chooseConfig()
makeConfig()

